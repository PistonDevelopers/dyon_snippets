ns meta

/// Reads f64.
fn read_f64__data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "f64") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

/// Reads bool.
fn read_bool__data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "bool") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

/// Reads str.
fn read_str__data_index_name(data: [[]], index: f64, name: str) -> opt[[]] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "str") && (data[index][3] == name) {
        some([1, data[index][4]])
    } else {
        none()
    }
}

/// Reads start node.
fn start_node__data_index_name(data: [[]], index: f64, name: str) -> opt[f64] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "start") && (data[index][3] == name) {
        some(1)
    } else {
        none()
    }
}

/// Reads end node.
fn end_node__data_index_name(data: [[]], index: f64, name: str) -> opt[f64] {
    if index >= len(data) { return none() }
    return if (data[index][2] == "end") && (data[index][3] == name) {
        some(1)
    } else {
        none()
    }
}

/// Ignores meta data until end of node is reached.
fn ignore__data_index(data: [[]], index: f64) -> f64 {
    level := 0
    i := index
    for i [index, len(data)) {
        if data[i][2] == "start" {
            level += 1
        } else if data[i][2] == "end" {
            if level == 0 { return i - index }
            level -= 1
        }
    }
    return len(data) - index
}
