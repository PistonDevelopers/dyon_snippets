ns number

/*
Some useful functions when working with numbers.
*/

sign(x: f64) = if x < 0 {-1} else if x > 0 {1} else {0}
neg(x: f64) = -x
half(x: f64) = x / 2
double(x: f64) = x * 2
mod2(x: f64) = x % 2
inv(x: f64) = 1 / x
id(x: f64) = clone(x)
cos2(x: f64) = cos(x)^2
sin2(x: f64) = sin(x)^2
neg_cos(x: f64) = -cos(x)
neg_sin(x: f64) = -sin(x)
cot(x: f64) = 1/tan(x)
sec_cos(x: f64) = 1/cos(x)
csc(x: f64) = 1/sin(x)
ln2(x: f64) = ln(x)/ln(2)
ln10(x: f64) = ln(x)/ln(10)
exp_inv(x: f64) = 1/exp(x)
exp_neg(x: f64) = -exp(x)
exp2(x: f64) = 2^x
exp10(x: f64) = 10^x
square(x: f64) = x*x
inv_square(x: f64) = 1/(x*x)
cube(x: f64) = x^3
inv_cube(x: f64) = 1/x^3
cbrt(x: f64) = x^(1/3)
one_sub(x: f64) = 1-x
mag10(x: f64) = floor(ln(x)/ln(10))
clamp(x: f64) = if x < 0 {0} else if x > 1 {1} else {clone(x)}
clamp_sym(x: f64) = if x < -1 {-1} else if x > 1 {1} else {clone(x)}
clamp_half(x: f64) = if x < -0.5 {-0.5} else if x > 0.5 {0.5} else {clone(x)}
inc(x: f64) = x+1
dec(x: f64) = x-1
zero(x: f64) = if x == 0 {1} else {0}
one(x: f64) = if x == 1 {1} else {0}
step(x: f64) = if x >= 0 {1} else {0}
stepg(x: f64) = if x > 0 {1} else {0}
step_neg(x: f64) = if x < 0 {1} else {0}
stepg_neg(x: f64) = if x <= 0 {1} else {0}
x_over_x_plus_one(x: f64) = x/(x+1)
x_over_x_minus_one(x: f64) = x/(x-1)
one_over_x_plus_one(x: f64) = 1/(x+1)
one_over_x_minus_one(x: f64) = 1/(x-1)
lorentz(x: f64) = 1/sqrt(1-x*x)
sigmoid(x: f64) = 1/(1+exp(-x))
rectifier(x: f64) = if x < 0 {0} else {clone(x)}
softplus(x: f64) = ln(1+exp(x))
sum(x: f64) = sum i x {i}
sum_fast(x: f64) = x*(x-1)/2
fac(x: f64) = prod i x {i+1}
prime_count(x: f64) = {
    b := 1
    a := x
    i := 2
    loop {
        if i >= (a+1)/2 {break}
        if (a % i) == 0 {
            a /= i
            b += 1
        } else {
            i += 1
        }
    }
    clone(b)
}
